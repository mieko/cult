#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path(File.join(__dir__, '../lib'))

require 'cri'

require 'cult/version'
require 'cult/config'
require 'cult/project'
require 'cult/node'
require 'cult/cli/all'
require 'cult/vps/all'

cult = Cri::Command.define do
  name        'cult'
  usage       'cult [options] [command [options...]]'
  summary     'Control a Fleet of Obedient Zomboid Machines'
  description <<~EOD
    Cult is a tool for creating and then managing a fleet of servers you
    control.  It operates on a few simple concepts:

      * Nodes: actual servers out there somewhere.  The purpose of using Cult is
        to end up with nodes doing useful work for you.

      * Roles: Every node has one or more roles, things it plans on being.
        Roles are composed of...

      * Tasks: Basically shell scripts that run in a specific order.

   Cult has a few more convenience concepts, like Keys and Providers, but you
   don't end up thinking about them too often.

   To create a new Cult project, use 'cult init DIRECTORY', but see the 'init'
   help first, with 'cult init --help'
  EOD

  required :C, :directory, 'Specify a project path' do |value|
    Cult::CLI.set_project(value)
  end

  flag :h, :help, 'Show this help' do |value, cmd|
    puts cmd.help
    exit 0
  end

  flag :y, :yes, 'answer "yes" to any questions' do
    Cult::CLI.yes = true
  end

  flag :v, :version, 'Show version information' do
    puts "Cult #{Cult::VERSION}"
    puts 'Copyright (C) 2016 Mike A. Owens, meter.md, and Contributors'
    exit 0
  end

  run do |_, _, cmd|
    puts cmd.help
    exit 0;
  end
end

Cult::CLI.commands.each do |m|
  cult.add_command(m)
end

if (env = ENV['CULT_PROJECT'])
  Cult::CLI.set_project(env)
else
  Cult.project ||= Cult::Project.from_cwd
end

begin
  cult.run(ARGV)
end
